{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/Errorboundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Errorboundary","state","hasError","this","Component","App","onSearchChange","event","setState","searchfields","target","value","fetch","then","response","json","users","filtered","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GACb,IADcC,EACf,EADeA,KAAMC,EACrB,EADqBA,MAAOC,EAC5B,EAD4BA,GAE3B,OACE,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcMK,EApBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACnB,OACC,6BAEKA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACG,kBAAC,EAAD,CACCC,IAAMD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCVW,EAZG,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAChC,OACE,yBAAKX,UAAU,UACd,2BAAOA,UAAU,mCACjBY,KAAK,SACLC,YAAa,qBACbC,SAAUH,MCECI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,UACrEJ,EAAMK,WCiBKC,E,kDAlBd,WAAYN,GACX,IAAD,8BACC,cAAMA,IACDO,MAAM,CACVC,UAAU,GAHZ,E,qDASC,OAAGC,KAAKF,MAAMC,SAEN,wDAEDC,KAAKT,MAAMK,a,GAhBQK,aCwDbC,E,kDAlDd,aAAc,IAAD,8BACZ,gBAQDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,SAR3C,EAAKV,MAAO,CACXnB,OAAQ,GACR2B,aAAc,IAJH,E,gEAgBZ,IAAD,OACCG,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKR,SAAS,CAAE1B,OAAQkC,S,+BAMjB,IAAD,OAEDC,EAAWd,KAAKF,MAAMnB,OAAOoC,QAAO,SAAAC,GACzC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKpB,MAAMQ,aAAaW,kBAElE,OAAqC,IAA7BjB,KAAKF,MAAMnB,OAAOwC,OACzB,wBAAI5C,UAAU,MAAd,cAEA,yBAAKA,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWW,aAAcc,KAAKG,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,OAASmC,W,GAzCPM,IAAMnB,WCKJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02890240.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id})=>\n{\n\treturn (\n\t\t\t<div className=' tc bg-light-green dib ma2 pa3 br3 grow bw2 shadow-5'>\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({ robots }) =>{\n\treturn (\n\t\t<div>\n    \t\t{\n    \t\t\trobots.map((user, i) =>{\n\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\t\tkey= {i} \n\t\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\n\t\t\t\t})\n    \t\t}\n   \t\t</div>\n\t);\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange})=>{\n\treturn (\n\t\t\t<div className='tc pa2'>\n\t\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder ='Search Robots Here' \n\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '2px solid #210D0A', height: '600px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass Errorboundary extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError: false\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tif(this.state.hasError)\n\t\t{\n\t\t\treturn <h1>Oooops there is an error</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default Errorboundary;","import React from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Errorboundary from '../components/Errorboundary';\n\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\trobots: [],\n\t\t\tsearchfields: ''\n\t\t}\n\t}\n\t\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfields: event.target.value})\n\t\t\n\t}\n\n\n\tcomponentDidMount()\n\t{\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users =>{\n\t\t\tthis.setState({ robots: users });\n\t\t})\n\t}\n\n\n\n\trender(){\n\n\t\tconst filtered = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfields.toLowerCase())\n\t\t})\n\t\treturn (this.state.robots.length === 0)?\n\t\t\t<h3 className='tc'>Loading...</h3> :\n\t\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<Errorboundary>\n\t\t\t\t\t\t<Cardlist robots= {filtered}/>\n\t\t\t\t\t</Errorboundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t)\n\t\t\n\t}\n\t\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './container/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}